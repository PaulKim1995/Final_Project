main = "Annual Frequency of Stage 3 Hurricanes")
#getting the number of storms in each month and plotting
modern$month = as.numeric(str_extract(modern$tracks_date, "[0-9]{2}"))
month = aggregate(modern$tracks_wind,
list(modern$tracks_id, modern$month), sum )
tapply(month$x, month$Group.2, length)
barplot(tapply( month$x, month$Group.2, length),
xlab = "Month",
ylab = "Number of Storms",
main = "Monthly Frequency of Storms")
#getting the number of storms that are above 35 in each month and plotting
group3 = aggregate(modern$tracks_wind>=35
,list(modern$tracks_id, modern$month), sum )
group3 = group3[group3$x!=0,]
tapply( group3$x, group3$Group.2, length)
barplot(tapply( group3$x, group3$Group.2, length),
xlab = "Month",
ylab = "Number of Tropical Storms",
main = "Monthly Frequency of Tropical Storms")
#getting the number of storms that are above 64 in each month and plotting
group4 = aggregate(modern$tracks_wind>=64,
list(modern$tracks_id, modern$month), sum )
group4 = group4[group4$x!=0,]
tapply( group4$x, group4$Group.2, length)
barplot(tapply( group4$x, group4$Group.2, length),
xlab = "Month",
ylab = "Number of Hurricanes",
main = "Monthly Frequency of Hurricanes")
#getting the number of storms that are above 96 in each month and plotting
group5 = aggregate(modern$tracks_wind>=96,
list(modern$tracks_id, modern$month), sum )
group5 = group5[group5$x!=0,]
tapply( group5$x, group5$Group.2, length)
barplot(tapply( group5$x, group5$Group.2, length),
xlab = "Month",
ylab = "Number of Stage 3 and Above Hurricanes",
main = "Monthly Frequency of Stage 3 and Above Hurricanes")
#Creating the summary statistics for the 3 storm types
#Summary statistics for Tropical Storms
trop_storm = (tapply( group$x, group$Group.2, length))
#average value for hurricanes
mean(trop_storm)
mean_trop = as.numeric(strtrim(as.character(mean(trop_storm)), width = 4))
#standard deviation for hurricanes
sd(trop_storm)
sd_trop = round(sd(trop_storm), 2)
#median for hurricanes
median(trop_storm)
median_trop = median(trop_storm)
#1st quartile for hurricanes
as.numeric(summary(trop_storm)[2])
onequart_trop = as.numeric(summary(trop_storm)[2])
#3rd quartile for hurricanes
as.numeric(summary(trop_storm)[5])
threequart_trop = as.numeric(summary(trop_storm)[5])
#Summary statistics for Hurricanes
trop_hurr = (tapply( group1$x, group1$Group.2, length))
#average value for hurricanes
mean(trop_hurr)
mean_hurr = round(mean(trop_hurr), 1)
#standard deviation for hurricanes
sd(trop_hurr)
sd_hurr = as.numeric(strtrim(as.character(sd(trop_hurr)), width = 4))
#median for hurricanes
median(trop_hurr)
median_hurr= median(trop_hurr)
#1st quartile for hurricanes
as.numeric(summary(trop_hurr)[2])
onequart_hurr=as.numeric(summary(trop_hurr)[2])
#3rd quartile for hurricanes
as.numeric(summary(trop_hurr)[5])
threequart_hurr=as.numeric(summary(trop_hurr)[5])
#Summary statistics for Hurricanes (stage 3)
trop_hurr3 = (tapply( group2$x, group2$Group.2, length))
#average value for hurricanes
mean(trop_hurr3)
mean_hurr3 = as.numeric(strtrim(as.character(mean(trop_hurr3)), width = 3))
#standard deviation for hurricanes
sd(trop_hurr3)
sd_hurr3 = as.numeric(strtrim(as.character(sd(trop_hurr3)), width = 4))
#median for hurricanes
median(trop_hurr3)
median_hurr3=median(trop_hurr3)
#1st quartile for hurricanes
as.numeric(summary(trop_hurr3)[2])
onequart_hurr3=as.numeric(summary(trop_hurr3)[2])
#3rd quartile for hurricanes
as.numeric(summary(trop_hurr3)[5])
threequart_hurr3 = as.numeric(summary(trop_hurr3)[5])
#Table of summary statistics
storms_summary = data.frame(
"Avg" = c(mean_trop,
mean_hurr,
mean_hurr3),
"Std Dev" = c(sd_trop,
sd_hurr,
sd_hurr3),
"First Quartile" = c(onequart_trop,
onequart_hurr,
onequart_hurr3),
"Median"= c(median_trop,
median_hurr,
median_hurr3),
"Third Quartile" = c(threequart_trop,
threequart_hurr,
threequart_hurr3),
row.names = c("35 Knots", "64 Knots", "96 Knots")
)
storms_summary
#Creating png files for each of the plots
png("./images/storms_annual.png")
barplot(tapply(year_total$x, year_total$Group.2, length),
xlab = "Year",
ylab = "Number of Storms",
main = "Annual Frequency of Storms")
dev.off()
png("./images/trop_annual.png")
barplot(tapply( group$x, group$Group.2, length),
xlab = "Year",
ylab = "Number of Tropical Storms",
main = "Annual Frequency of Tropical Storms")
dev.off()
png("./images/hurr_annual.png")
barplot(tapply( group1$x, group1$Group.2, length),
xlab = "Year",
ylab = "Number of Hurricanes",
main = "Annual Frquency of Hurricanes")
dev.off()
png("./images/hurr3_annual.png")
barplot(tapply( group2$x, group2$Group.2, length),
xlab = "Year",
ylab = "Number of Stage 3 and Above Hurricanes",
main = "Annual Frequency of Stage 3 Hurricanes")
dev.off()
png("./images/storms_monthly.png")
barplot(tapply( month$x, month$Group.2, length),
xlab = "Month",
ylab = "Number of Storms",
main = "Monthly Frequency of Storms")
dev.off()
png("./images/trop_monthly.png")
barplot(tapply( group3$x, group3$Group.2, length),
xlab = "Month",
ylab = "Number of Tropical Storms",
main = "Monthly Frequency of Tropical Storms")
dev.off()
png("./images/hurr_monthly.png")
barplot(tapply( group4$x, group4$Group.2, length),
xlab = "Month",
ylab = "Number of Hurricanes",
main = "Monthly Frequency of Hurricanes")
dev.off()
png("./images/hurr3_monthly.png")
barplot(tapply( group5$x, group5$Group.2, length),
xlab = "Month",
ylab = "Number of Stage 3 and Above Hurricanes",
main = "Monthly Frequency of Stage 3 and Above Hurricanes")
dev.off()
#Creating pdf files for each of the plots
pdf("./images/storms_annual.pdf")
barplot(tapply(year_total$x, year_total$Group.2, length),
xlab = "Year",
ylab = "Number of Storms",
main = "Annual Frequency of Storms")
dev.off()
pdf("./images/trop_annual.pdf")
barplot(tapply( group$x, group$Group.2, length),
xlab = "Year",
ylab = "Number of Tropical Storms",
main = "Annual Frequency of Tropical Storms")
dev.off()
pdf("./images/hurr_annual.pdf")
barplot(tapply( group1$x, group1$Group.2, length),
xlab = "Year",
ylab = "Number of Hurricanes",
main = "Annual Frquency of Hurricanes")
dev.off()
pdf("./images/hurr3_annual.pdf")
barplot(tapply( group2$x, group2$Group.2, length),
xlab = "Year",
ylab = "Number of Stage 3 and Above Hurricanes",
main = "Annual Frequency of Stage 3 Hurricanes")
dev.off()
pdf("./images/storms_monthly.pdf")
barplot(tapply( month$x, month$Group.2, length),
xlab = "Month",
ylab = "Number of Storms",
main = "Monthly Frequency of Storms")
dev.off()
pdf("./images/trop_monthly.pdf")
barplot(tapply( group3$x, group3$Group.2, length),
xlab = "Month",
ylab = "Number of Tropical Storms",
main = "Monthly Frequency of Tropical Storms")
dev.off()
pdf("./images/hurr_monthly.pdf")
barplot(tapply( group4$x, group4$Group.2, length),
xlab = "Month",
ylab = "Number of Hurricanes",
main = "Monthly Frequency of Hurricanes")
dev.off()
pdf("./images/hurr3_monthly.pdf")
barplot(tapply( group5$x, group5$Group.2, length),
xlab = "Month",
ylab = "Number of Stage 3 and Above Hurricanes",
main = "Monthly Frequency of Stage 3 and Above Hurricanes")
dev.off()
##Regression Analysis
#mean pressure on mean wind
mean_pressures = aggregate(modern[, "tracks_pressure"], list(modern$tracks_id), mean)
mean_winds = aggregate(modern[, "tracks_wind"], list(modern$tracks_id), mean)
mean_pressure_wind = merge(mean_pressures, mean_winds, by = "Group.1")
mean_pressure_wind = filter(mean_pressure_wind, tracks_pressure > 0)
mean_pressure_wind = mean_pressure_wind[, c(2, 3)]
mean_pressure_wind_reg = lm(tracks_pressure ~ tracks_wind, data = mean_pressure_wind)
mean_pressure_wind_plot = ggplot(mean_pressure_wind, aes(x = tracks_pressure, y = tracks_wind)) +
geom_point() + geom_smooth(method = "lm") + xlab("Pressure") + ylab("Wind") +
ggtitle("Mean Pressure vs Mean Wind")
#Outliers skew the regression line. Removing outliers:
mean_pressure_wind_clean = filter(mean_pressure_wind, tracks_pressure > 950)
mean_pressure_wind_clean_reg = lm(tracks_pressure ~ tracks_wind, data = mean_pressure_wind_clean)
mean_pressure_wind_clean_plot = ggplot(mean_pressure_wind_clean, aes(x = tracks_pressure, y = tracks_wind)) +
geom_point() + geom_smooth(method = "lm") + xlab("Pressure") + ylab("Wind") +
ggtitle("Mean Pressure vs Mean Wind, outliers removed")
#median pressure on median wind
median_pressures = aggregate(modern[, "tracks_pressure"], list(modern$tracks_id), median)
median_winds = aggregate(modern[, "tracks_wind"], list(modern$tracks_id), median)
median_pressure_wind = merge(median_pressures, median_winds, by = "Group.1")
median_pressure_wind = filter(median_pressure_wind, tracks_pressure > 0)
median_pressure_wind = median_pressure_wind[, c(2, 3)]
median_pressure_wind_reg = lm(tracks_pressure ~ tracks_wind, data = median_pressure_wind)
median_pressure_wind_plot = ggplot(median_pressure_wind, aes(x = tracks_pressure, y = tracks_wind)) +
geom_point() + geom_smooth(method = "lm") + xlab("Pressure") + ylab("Wind") +
ggtitle("Median Pressure vs Median Wind")
#png's and pdf's of regression plots:
png("./images/mean_pressure_wind.png")
mean_pressure_wind_plot
dev.off()
png("./images/mean_pressure_wind_clean.png")
mean_pressure_wind_clean_plot
dev.off()
png("./images/median_pressure_wind.png")
median_pressure_wind_plot
dev.off()
pdf("./images/mean_pressure_wind.pdf")
mean_pressure_wind_plot
dev.off()
pdf("./images/mean_pressure_wind_clean.pdf")
mean_pressure_wind_clean_plot
dev.off()
pdf("./images/median_pressure_wind.pdf")
median_pressure_wind_plot
dev.off()
# ==============================================================================
# Visualization Cleaning Script for the Final Project
# Author(s): Jeff Grant and Paul Kim
# Date: 08-11-2015
# Description: This code takes the raw storm csv data and cleans it in preparation
#              for use in visualizations.
# Data: "raw_NA.csv" & "raw_EP.csv"
# ==============================================================================
#loading libraries and reading in the data
library(dplyr)
library(stringr)
raw_NA = read.csv(file = "./rawdata/raw_NA.csv", header = FALSE, skip = 3, col.names =
c("Serial_Number", "Season", "Num", "Basin", "Sub_Basin", "Name", "Time",
"Nature", "Lat", "Long", "Wind", "Pressure", "Center", "Wind_Percentile",
"Pressure_Percentile", "Track_Type"))
raw_EP = read.csv(file = "./rawdata/raw_EP.csv", header = FALSE, skip = 3, col.names =
c("Serial_Number", "Season", "Num", "Basin", "Sub_Basin", "Name", "Time",
"Nature", "Lat", "Long", "Wind", "Pressure", "Center", "Wind_Percentile",
"Pressure_Percentile", "Track_Type"))
#Isolating storms between 1980 and 2010
clean_NA = filter(raw_NA, Season >= 1980, Season <= 2010)
clean_EP = filter(raw_EP, Season >= 1980, Season <= 2010)
##Combining NA and EP data
combined = rbind(clean_NA, clean_EP)
#Formatting changes
combined$Time = as.character(combined$Time)
combined$year = combined$Season
##adding decade factor
combined = mutate(combined, decade = as.factor(ifelse(year < 1990, "1980s",
ifelse(year < 2000, "1990s",
"2000s"))))
##Adding month factor
combined = mutate(combined, month = as.numeric(str_extract(str_extract(Time,
pattern = "-[0-9][0-9]-"), pattern = "[0-9][0-9]")))
month = str_extract(str_extract(combined$Time, pattern = "-[0-9][0-9]-"), pattern = "[0-9][0-9]")
combined = mutate(combined, month = as.factor(ifelse(month == 1, "January",
ifelse(month == 2, "February",
ifelse(month == 3, "March",
ifelse(month == 4, "April",
ifelse(month == 5, "May",
ifelse(month == 6, "June",
ifelse(month == 7, "July",
ifelse(month == 8, "August",
ifelse(month == 9, "September",
ifelse(month == 10, "October",
ifelse(month == 11, "November",
"December")))))))))))))
##Ordering the month factors
combined$month = factor(combined$month, levels = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November",
"December"))
#Making the final data table with the required data.
clean = select(combined, Serial_Number, Lat, Long, Wind, month, year, decade)
#Exporting the cleaned data
write.csv(clean, file = "./data/visualization_clean.csv", row.names = FALSE)
# ==============================================================================
# Visualization Script for the Final Project
# Author(s): Jeff Grant and Paul Kim
# Date: 08-11-2015
# Description: This code takes the previous csv files and uses them for analysis
#              It also exports png and pdf files of the graphics created.
# Data: "visualization_clean.csv"
# ==============================================================================
library(ggplot2)
library(maps)
library(mapproj)
library(mapdata)
library(dplyr)
storm_data = read.csv("data/visualization_clean.csv", header = TRUE)
storm_data$month = factor(storm_data$month, levels = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November",
"December"))
pacific_map = filter(map_data("world2"), long > 100, long < 280, lat > -30)
atlantic_map = filter(map_data("world"), long > -120, long < 30, lat > -10)
pacific_data = storm_data
pacific_data$Long[which(pacific_data$Long < 0)] = pacific_data$Long[which(pacific_data$Long < 0)] + 360
pacific_data = filter(pacific_data, Long > 100, Long < 280, Lat > -50)
atlantic_data = storm_data
atlantic_data = filter(atlantic_data, Long > -120, Long < 30, Lat > -10)
all_pacific = ggplot(pacific_data) +
geom_map(dat = pacific_map, map = pacific_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
xlab("Latitude") + ylab("Longitude") + ggtitle("All Pacific Ocean Storms")
all_atlantic = ggplot(atlantic_data) +
geom_map(dat = atlantic_map, map = atlantic_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
xlab("Latitude") + ylab("Longitude") + ggtitle("All Atlantic Ocean Storms")
pacific_monthly = ggplot(pacific_data) +
geom_map(dat = pacific_map, map = pacific_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ month) + xlab("Latitude") + ylab("Longitude") + ggtitle("Pacific Storms by Month")
atlantic_monthly = ggplot(atlantic_data) +
geom_map(dat = atlantic_map, map = atlantic_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ month) + xlab("Latitude") + ylab("Longitude") + ggtitle("Atlantic Storms by Month")
pacific_80s = ggplot(filter(pacific_data, decade == "1980s")) +
geom_map(dat = pacific_map, map = pacific_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Pacific Storms, 1980-1990")
pacific_90s = ggplot(filter(pacific_data, decade == "1990s")) +
geom_map(dat = pacific_map, map = pacific_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Pacific Storms, 1990-2000")
pacific_00s = ggplot(filter(pacific_data, decade == "2000s")) +
geom_map(dat = pacific_map, map = pacific_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Pacific Storms, 2000-2010")
atlantic_80s = ggplot(filter(atlantic_data, decade == "1980s")) +
geom_map(dat = atlantic_map, map = atlantic_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Atlantic Storms, 1980-1990")
atlantic_90s = ggplot(filter(atlantic_data, decade == "1990s")) +
geom_map(dat = atlantic_map, map = atlantic_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Atlantic Storms, 1990-2000")
atlantic_00s = ggplot(filter(atlantic_data, decade == "2000s")) +
geom_map(dat = atlantic_map, map = atlantic_map,
aes(map_id = region, x = long, y = lat),
fill = "#FFF5EE", color = "#4682B4", size = 0.25) +
geom_path(aes(x = Long, y = Lat, group = Serial_Number), size = .1, color = "#FF6346") +
facet_wrap(~ year) + xlab("Latitude") + ylab("Longitude") + ggtitle("Atlantic Storms, 2000-2010")
#Exporting images:
png("images/all_pacific.png")
all_pacific
dev.off()
png("images/all_atlantic.png")
all_atlantic
dev.off()
png("images/pacific_monthly.png")
pacific_monthly
dev.off()
png("images/atlantic_monthly.png")
atlantic_monthly
dev.off()
png("images/pacific_80s.png")
pacific_80s
dev.off()
png("images/pacific_90s.png")
pacific_90s
dev.off()
png("images/pacific_00s.png")
pacific_00s
dev.off()
png("images/atlantic_80s.png")
atlantic_80s
dev.off()
png("images/atlantic_90s.png")
atlantic_90s
dev.off()
png("images/atlantic_00s.png")
atlantic_00s
dev.off()
pdf("images/all_pacific.pdf")
all_pacific
dev.off()
pdf("images/all_atlantic.pdf")
all_atlantic
dev.off()
pdf("images/pacific_monthly.pdf")
pacific_monthly
dev.off()
pdf("images/atlantic_monthly.pdf")
atlantic_monthly
dev.off()
pdf("images/pacific_80s.pdf")
pacific_80s
dev.off()
pdf("images/pacific_90s.pdf")
pacific_90s
dev.off()
pdf("images/pacific_00s.pdf")
pacific_00s
dev.off()
pdf("images/atlantic_80s.pdf")
atlantic_80s
dev.off()
pdf("images/atlantic_90s.pdf")
atlantic_90s
dev.off()
pdf("images/atlantic_00s.pdf")
atlantic_00s
dev.off()
file.create("README.md")
, file = "README.md")
cat("# Tropical Storms
### Introduction
This project presents an analysis of tropical storm data from  the National Climate Data Center's International Best Track Archive for Climate Stewardship (IBTrACS). It specifically focuses on storms between 1980 and 2013.
### Authors
Paul Kim, luapkim@berkeley.edu
Jeff Grant grantj@berkeley.edu
### Organization
The project folder contains the following directories and files.
- code: contains all .R script files
- rawdata: contains all unprocessed data, downloaded via the skeleton.R file
- data: contains the processed and cleaned data
- resources: contains any downloaded resource files
- report: contains the project report RMarkdown form, as well as the corresponding pdf
- images: contains all images and plots
- README.md is this document
- skeleton.R is an R script that creates the directories and this README.md file, and also downloads raw data into the rawdata directory.
"
, file = "README.md")
cat(
"# Tropical Storms
### Introduction
This project presents an analysis of tropical storm data from  the National Climate Data Center's International Best Track Archive for Climate Stewardship (IBTrACS). It specifically focuses on storms between 1980 and 2013.
### Authors
Paul Kim, luapkim@berkeley.edu
Jeff Grant grantj@berkeley.edu
### Organization
The project folder contains the following directories and files.
- code: contains all .R script files
- rawdata: contains all unprocessed data, downloaded via the skeleton.R file
- data: contains the processed and cleaned data
- resources: contains any downloaded resource files
- report: contains the project report RMarkdown form, as well as the corresponding pdf
- images: contains all images and plots
- README.md is this document
- skeleton.R is an R script that creates the directories and this README.md file, and also downloads raw data into the rawdata directory.
"
, file = "README.md")
file.create("README.md")
cat(
"# Tropical Storms
### Introduction
This project presents an analysis of tropical storm data from  the National Climate Data Center's International Best Track Archive for Climate Stewardship (IBTrACS). It specifically focuses on storms between 1980 and 2013.
### Authors
Paul Kim, luapkim@berkeley.edu
Jeff Grant grantj@berkeley.edu
### Organization
The project folder contains the following directories and files.
- code: contains all .R script files
- rawdata: contains all unprocessed data, downloaded via the skeleton.R file
- data: contains the processed and cleaned data
- resources: contains any downloaded resource files
- report: contains the project report RMarkdown form, as well as the corresponding pdf
- images: contains all images and plots
- README.md is this document
- skeleton.R is an R script that creates the directories and this README.md file, and also downloads raw data into the rawdata directory.
"
, file = "README.md")
